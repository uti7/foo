#!/bin/bash -f
set -f
self=${0//*\//}
function usage {
  cat << EOT

synopsis:
  1) [find] current direcory files
  2) [diff] from another directory for every files
  3) [echo] a command line for different file that \`vimdiff dir_b_file dir_a_file', also \`cp ...'

usage:  $self [OPTION] DIR_A

DIR_A:  destination (DIR_B is current directory)

OPTION:
  -N NOTFILE  : specified to find option that \`-not -name NOTFILE'
  -P PRUNEDIR : specified to find option that \`-name PRUNEDIR -prune -o'
  -r          : output the command line that reverse A and B 
  -v          : output only vimdiff command line
  -c          : output only cp command line
  -f          : output full path (default: as is)

example:
  $ cd ~/foo
  $ $self -c -N config.php -N database.php -N log4php_configurator.xml /var/www/html/foo | tee /tmp/aaa
  $ sh -x /tmp/aaa

EOT
}

is_vimdiff=1
is_cp=1
dir_b=.

opt=`getopt -q -o cfN:P:rv -- "$@"`
[ $? -ne 0 ] && usage && exit 2

eval set -- "$opt"
while [ 0 ]
do
    case $1 in
    -c) is_vimdiff=0; shift;;
    -f) is_out_fullpath=1; shift;;
    -N)
      not_spec="$not_spec -not -name $2"
      shift 2
      ;;
    -P)
      prune_spec="$prune_spec -name $2 -prune -o"
      shift 2
      ;;
    -r) is_reverse=1; shift;;
    -v) is_cp=0; shift;;
    --) shift; break;;
    *)  usage; exit 2;;
    esac
done
[ $# -eq 0 ] && usage && exit 2

dir_a=`echo -n "$1"|sed -e 's|/$||'`

if [ ${is_out_fullpath:-0} -eq 1 ]; then
  dir_a=$(cd "$dir_a" && pwd)
  dir_b="$PWD"
fi

  #-prune -o -name \*.js \
  #-exec sh /tmp/is_text {} \; -name \*.csv \

find . $prune_spec \
  -name \*.orig -prune -o \
  -name \*.pdb -prune -o \
  -name \*.vcxproj -prune -o \
  -name \*.vcxproj.user -prune -o \
  -name \*.vcproj -prune -o \
  -name \*.tlog -prune -o \
  -name \*.log -prune -o \
  -name \*.obj -prune -o \
  -name \*.exe -prune -o \
  -name dist -prune -o -name node_modules -prune -o -name semantic -prune -o \
  -name uploads -prune -o -name fonts -prune -o -name logs -prune -o -name .git -prune -o -name .eee\? -prune -o -name tags -prune -o -name user_guide -prune -o -name errors.err -prune -o -name sessions -prune -o -name filing -prune -o -type f $not_spec -print \
|awk -v dir_b="$dir_b" -v dir_a="$dir_a" -v is_reverse=${is_reverse:-0} \
  -v is_cp=${is_cp:-0} -v is_vimdiff=${is_vimdiff:-0} 'BEGIN{
        i=1;
    }
    {
        b=$0;
        if(match(dir_b,/^\//)>0){ # full path spec
            sub(/^\./, dir_b, b); # however, due to find output would begin with "."
        }
        a=$0;
        sub(/^\./,dir_a,a); # thats the same
        a=sprintf("%1c%s%1c",39,a,39);
        b=sprintf("%1c%s%1c",39,b,39);
        if(is_reverse!=0){
          is_reverse=a;a=b;b=is_reverse;
        }
        cmd=sprintf("diff -q --strip-trailing-cr %s %s 1>/dev/null 2>&1\n",a,b);
        x=system(cmd);close(cmd);
        if(x==1){
          printf("# %d: ---------- has difference -----\n",i);
          if(is_vimdiff==1){
            cl=sprintf("vimdiff %s %s",b,a);
            if(is_cp==0){
              printf("echo \"%s\"\n",cl);
              printf("echo -n \"sure? ([y]es, [s]kip or else):\" && read q && case \"$q\" in y) %s;; s) echo \"...skipped\";; *) exit 3;; esac\n", cl);
            }else{
              print cl;
            }
#            if(is_cp==0){
#              printf("echo -n \"continue? (y or else):\" && read q && [ \"$q\" != y ] && exit 3\n");
#            }
          }
          if(is_cp==1) printf("cp %s %s\n",b,a);
        }
        if(x==2){
          printf("# %d: ---------- does not exist on one side -----\n",i);
          cl=sprintf("cp %s %s",b,a);
          if(is_vimdiff==1 && is_cp==0){
            printf("echo \"%s\"\n",cl);
            printf("echo -n \"sure? (y or else):\" && read q && [ \"$q\" != y ] && exit 3\n");
          }
          print cl;
        }
        if(x!=0){
          i++;
        }
    }
    END{
        if(is_vimdiff==1 && is_cp==0) printf("echo \"%s\"\n","done.");
    }
    '
