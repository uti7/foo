#!/bin/bash -f
set -f
#IFS=$'\n'
function usage {
  cat << EOT | less -e
name:
  $myname - file traverser

synopsis:
  find(1) DIR -name FILE ->  grep(1) PATTERN ->  vim(1) +/PATTERN/

usage:
  $myname [-d DIR [-d ...]] [{-n|-N|-e CMD}] [-FiIclxtz] PATTERN [FILE...]
  $myname [-d DIR [-d ...]] [{-n|-N|-e CMD}] [-FiIclxtz] {-a|-p|-V} PATTERN [{-a|-p|-v|-V} PATTERN ...] [FILE...]
  $myname [-d DIR [-d ...]] [{-n|-N|-e CMD}] [-iIc] -L [FILE...]
  $myname [-d DIR [-d ...]] [{-n|-N|-e CMD}] [-iIc] -D [FILE...]
  $myname [-h]

  -d DIR       : a search-path, givens to find(1). if omited, then \`.'
  -h           : show this usage.
  -i           : ignore case, its applied the FILE as well as the PATTERN
  -I           : reset ignore-case where specified in .${myname}rc, however FILE has no effect
  -c           : complete matching for FILE, default: partial matching
  -l, -L       : no grep(1), will be match irrespective of PATTERN (see below the note:)
  -D           : find target is only directory, and no grep forcely.
  -n           : no vim(1), only output like grep
  -N           : ask whether open by vim
  -e CMD       : execute CMD instead vim
  -a PATTERN   : for all PATTERN(s) matching (i.e. AND condition of them)
  -A PATTERN   : same as -a, evaluates to '\<PATTERN\>'
  -p PATTERN   : filtering for every path
  -v PATTERN   : invert matching for file content which NOT condition.
                 use it following one or more \`-a PATTERN'
  -V PATTERN   : invert filtering for every path
  -P PRUNEDIR  : specified to find option that \`-name PRUNEDIR -prune -o'
  -F           : PATTERN as fixed strings (behave like fgrep(1))
  -x           : output precedent line (e.g. php declaration) with grep results.
                 (see the variable \`default_precedent' what setting in
                 \$HOME/.${myname}rc for details)
                 has no effect when no-grep opt (-l, -L) specified
  -z           : for .gz compressed file, zgrep is used instead of grep
  -t           : find target is only text, that determined by file(1).
                 it's not available with \`-z'
  -s           : show sum(1) for this file.
  -b           : if errorfile cache exists, remove it before find

  DIR          : a directory
  CMD          : command string that single argument expressed (e.g. \`-e ls\\ -l')
  PATTERN      : a extended regular expression
  FILE         : basename of filename, or directory/[directory/.../]filename
                 if appear directory-spec at FILE, apply to search-path implied.
                 also, if its a descendant directory of search-path,
                 it may be far with seach-path.  wildcard-char should be escaped
                 to avoid expand by shell. (e.g. \\*.txt)
                 if omited, then \`\\*'
note:
                 option -l with -n (or -N) are specified,
                 grep invoked and print only each file name which, like its
                 output of \`grep -l'
                 however, -L specified never grep

file:
                 \$HOME/.${myname}rc:
                 the preferences. it will automaticaly generated when
                 ${myname} exec for the 1st time.

                 \$HOME/.${myname}hist:
                 the history that cmd line args

                .vimrc:
                  " ----- quickfix relative, etc..
                  set laststatus=2 " always show file name
                  set errorfile=.eee0
                  set errorformat=%f:%l:%m
                  noremap <C-K> :cp<CR>
                  noremap <C-J> :cn<CR>
                  noremap <C-H> :cc<CR>
                  nnoremap !fj :!fj 
                  noremap <expr> <Leader>k ':!fj -A ' . expand("<cword>") . ' '
                  noremap <expr> <Leader>l ':!fj -L ' . expand("<cword>") . ' '
                  map \\0 :cf .eee0<CR>
                  map \\1 :cf .eee1<CR>
                  map \\2 :cf .eee2<CR>
                  nnomap \\h :e ~/.fjhist<Bar>$<CR>
                  autocmd BufEnter *.fjhist setlocal autoread

                  set keywordprg=fj\\ -A
                  function! s:fj_L_for_keyword()
                    exec '!fj -i -L ' . expand("<cword>")
                    if filereadable(&errorfile)
                      cf
                    endif
                  endfunction
                  command! Fjl4kw :call s:fj_L_for_keyword()
                  nnoremap <C-@> :Fjl4kw<CR>
                  " ----- 

                \$VIMRUNTIME/filetype.vim:
                  " ----- fj history file
                  au BufNewFile,BufRead .fjhist		setf fjhist
                  " ----- 

                \$VIMRUNTIME/ftplugin/fjhist.vim:
                  if exists('b:did_ftplugin')
                    finish
                  endif
                  let b:did_ftplugin=1

                  nnoremap <buffer> <LocalLeader>f :call <SID>FireFj()<CR>
                  function! <SID>FireFj() abort
                    exec '!fj ' . getline(".")
                    if filereadable(&errorfile)
                      cf
                    endif
                  endfunction

examples:

     $ $myname PATTERN foo\\*.xml
      its like, as:
        find . -name foo\\*.xml -print |
        vim \`grep -El PATTERN\` 

     $ $myname -d /etc PATTERN \\*.conf
      as:
        vim +/PATTERN/ \\
          \`find /etc -name \\*.conf -print0 | xargs -0  grep -El PATTERN\`

     $ $myname -nl \\*
      as:
        find . -name \\* -print

     $ $myname -l \\*bar.php
      as:
        vim \`find . -name \\*bar.php -print\`

     $ $myname -a foo -a bar /etc/\\*ini /var/log/\\*.log
      as:
        find /etc /var/log \\( -name \\*.ini -o -name \\*.log \\) \\
          -exec grep -Eq foo {} \\; -print | \\
        grep -EHn 'bar' | vim +/foo\\|bar/
EOT
}

function show_sum
{
  echo $0
  sum $0
}

function zrefrep
{
  re=$1
  shift
  x=1
  for zf in $*
  do
    zcat $zf | refrep $re
    [ $? -eq 0 ] && x=0
  done
  return $x
}

function refrep
{
  if [ -z "$default_precedent" ]; then
    precedent='(\\<class\\>|\\<function\\>)[ \\t]+\\w+'
  else
    precedent="$default_precedent"
  fi
  re=$1
  re=`echo "$re"|sed -e 's/\\\\/\\\\\\\\/g'`
  shift
  files=$*
  [ -n "$ignore_case_opt" ] && ic=1
  gawk -v ic=${ic:-0} -v zf=${zf:-unknown} -v precedent="$precedent" -v re="$re" 'BEGIN{IGNORECASE=ic;x=1;preserve=""}{\
    if(match($0, precedent)>0){\
      fname = (FILENAME == "-") ? zf : FILENAME;\
      preserve = fname ":" FNR ":@@@@@:" $0;\
    }\
    if(match($0, re)>0){\
      if(preserve != ""){\
        print preserve;\
        preserve = "";\
      }\
      fname = (FILENAME == "-") ? zf : FILENAME;\
      print fname ":" FNR ":" $0;\
      x = 0;\
    }\
  }END{exit(x);}' $files
  return $?
}

function savehist
{
  [ "$*" = "" ] && return
  args=`echo "$*"|sed -e 's/\\\\/\\\\\\\\\\\\\\\\/g' -e 's/\*/\\\\\\\\*/g' -e 's/-b *//' -e 's/ *-b//'`
  histfile="$HOME/.${myname}hist"
  trap "rm -f $histfile.$$" 0
  if [ -f "$histfile" ]; then
    awk -v args="$args" '{if($0 != args){print $0;}} END{print args;}' "$histfile" >"$histfile.$$"
  else
    echo "$args" >"$histfile.$$"
  fi
  [ -f "$histfile.$$" ] && mv -f "$histfile.$$" "$histfile"
  echo "$args"|md5sum|cut -d ' ' -f 1 # the cache file name
}

function mkrc
{
  cat << EOT >"$HOME/.${myname}rc"
### default settings

## -d
#base_path="/opt /etc /var/log"

## 1: -n, 2: -N
is_not_vi=2

## -i
#ignore_case_opt="-i" # for PATTERN
#name_opt="-iname"    # for FILE

## -c
#is_complete_filename_match=1

## -l
#is_not_grep=1

## FILE
#default_file_spec="* .[a-zA-Z]*"

## for -x
# gawk RE that string-const, so \\\\ (back-slash twice)
default_precedent='(\\\\<class\\\\>|\\\\<function\\\\>|\\\\<CREATE\\\\>.+\\\\<TABLE\\\\>).+\\\\w+'

## for -P 
prune_spec="-name .git -prune -o -name .svn -prune -o -name tags -prune -o -name ptags -prune -o -name errors.err -prune -o -name .eee[0-2] -prune -o -name .fjhist -prune -o"

EOT
}


function is_ancestor_vim
{
  # $1: my pid
  # $2: vim command (e.g. /usr/bin/vim or simply, vim)
  my_pid=$1
  target_cmd=$2

  # if necessary, change follows
  case `uname` in
  Linux)
    ps_cmd="ps -ef"
    pid_column=2
    ppid_column=3
    cmd_column=8
    ;;
  MINGW*)
    ps_cmd="ps -ef"
    pid_column=2
    ppid_column=3
    cmd_column=6
    ;;
  *)
    ps_cmd="ps -ef"
    pid_column=2
    ppid_column=3
    cmd_column="6,7"
    ;;
  esac 

  eval "$ps_cmd" | awk -v pid_column=$pid_column \
    -v ppid_column=$ppid_column \
    -v cmd_column="$cmd_column" \
    -v my_pid="$my_pid" \
    -v target_cmd="$target_cmd" \
  'function get_parent(pid){ \
#print "DEBUG: pid=" pid; \
    split(plist[pid], item, ","); \
#print "DEBUG: item[1]=" item[1]; \
    return item[1]; \
  }\
  BEGIN { split(cmd_column, cols, ","); }\
  {\
    for(i in cols){\
      if($cols[i]!=""){\
#print "DEBUG: entry pid=[" $pid_column "]: " $ppid_column "-" $cols[i]; \
        plist[$pid_column] = sprintf("%d,%s", $ppid_column, $cols[i]);\
      }\
    }\
  }\
  END{ \
    lookup_pid = my_pid; \
#print "DEBUG: lookup_pid=" lookup_pid; \
    while((lookup_pid = get_parent(lookup_pid)) != ""){ \
      sub(/^.*\//, "", item[2]); \
#print "DEBUG: cmd=" item[2]; \
      if(item[2] == target_cmd){ \
        exit(0); \
      } \
    } \
    exit(1); }'
}

#     UID     PID    PPID  TTY        STIME COMMAND
#      ga  254320  297684 pty0     02:03:12 /usr/bin/ps
#      ga  280208  282216 pty0       Mar  1 /usr/bin/bash
#      ga  279008  280208 pty0     01:16:06 /usr/bin/vim
#      ga  282216       1 ?          Mar  1 /usr/bin/mintty
#      ga  297684  279008 pty0     02:03:12 /usr/bin/bash

#is_ancestor_vim $$ $vi
#exit $?

#########
# begin
##########
myname=${0//*\//}
vi=vim
grep=grep
refrep=refrep
name_opt="-name"
type_opt="f"
pattern_opt="E"
errors_err_prefix="/tmp/.eee"

if [ ! -r "$HOME/.${myname}rc" ]; then
  mkrc
fi
. "$HOME/.${myname}rc"

if [ ! -d "$HOME/.${myname}" ]; then
  mkdir "$HOME/.${myname}"
fi

opt=`getopt -q -o a:A:bd:De:hnNFiIclLp:P:sv:V:txz -- "$@"`
[ $? -ne 0 ] && usage && exit 2

cache_path=`savehist $*`
cache_path="$HOME/.${myname}/$cache_path"

eval set -- "$opt"
while [ 0 ]
do
    case $1 in
    -a)
      reg_exp[${#reg_exp[@]}]="$2"
      invert_opt[${#invert_opt[@]}]=""
      shift 2
      ;;
    -A)
      reg_exp[${#reg_exp[@]}]="\\<$2\\>"
      invert_opt[${#invert_opt[@]}]=""
      shift 2
      ;;
    -b) is_remove_cache=1
        shift;;
    -d)
      f=`echo $2 | sed -e 's/[ ()]/?/g'`
      base_path="${base_path:-} $f"; shift 2;;
    -D)  type_opt="d"; is_not_grep=1
        shift
      ;;
    -n)
      is_not_vi=1
      [ ${is_not_grep:-0} -eq 1 ] && is_file_with_matches=1
      shift
      ;;
    -N)
      is_not_vi=2
      [ ${is_not_grep:-0} -eq 1 ] && is_file_with_matches=1
      shift
      ;;
    -e)  execute_cmd="$2"; is_not_vi=3; shift 2;;
    -i)  ignore_case_opt="-i";name_opt="-iname"; shift;;
    -I)  unset ignore_case_opt; shift;;
    -F)  pattern_opt="F"; shift;;
    -c)  is_complete_filename_match=1; shift;;
    -l)
      is_not_grep=1
      [ ${is_not_vi:-0} -gt 0 ] && is_file_with_matches=1
      shift
      ;;
    -L)
      is_not_grep=1
      shift
      ;;
    -p)
      reg_exp[${#reg_exp[@]}]="$2"
      invert_opt[${#invert_opt[@]}]="for_must_path"
      shift 2
      ;;
    -P)
      prune_spec="$prune_spec -name $2 -prune -o"
      shift 2
      ;;
    -s) show_sum; exit 2;;
    -t)
      is_only_text=1
      grep=grep
      refrep=refrep
      shift;;
    -v)
      if [ ${#reg_exp[@]} -eq 0 ]; then
        echo "ERROR: -$opt opt is available that following one or more \`-a PATTERN'"
        echo "to see usage, try \`$myname -h'"
        exit 2
      fi
      reg_exp[${#reg_exp[@]}]="$2"
      invert_opt[${#invert_opt[@]}]="for_content"
      shift 2
      ;;
    -V)
      reg_exp[${#reg_exp[@]}]="$2"
      invert_opt[${#invert_opt[@]}]="for_path"
      shift 2
      ;;
    -x)  is_out_precedent=1; shift;;
    -z)  grep=zgrep;refrep=zrefrep; shift;;
    --) shift; break;;
    *)  usage; exit 2;;
    esac
done

[ ${is_remove_cache:-0} -eq 1 ] && rm -f "$cache_path"

[ ${is_file_with_matches:-0} -eq 1 ] && is_not_grep=0 # -ln or -lN


if [ ${is_not_grep:-0} -eq 0 ] && [ -z "$reg_exp" ]; then
  reg_exp[0]="$1"
  invert_opt[0]=""
  [ -z "$reg_exp" ] && usage && exit 2
  shift
fi

if [ $# -eq 0 ]; then
  # file is omited
  [ -z "$base_path" ] && base_path="."
  file_spec_org="${default_file_spec:-*}"
else
  file_spec_org=""
  #if [ -z "$base_path" ]; then
    for f in $*
    do
      d=`dirname $f`
      if [ "$d" != "." ]; then
        if [ -d "$d" ]; then
          base_path="$base_path $d"
        else
          reg_exp[${#reg_exp[@]}]="$d"
          invert_opt[${#invert_opt[@]}]="for_must_path"
        fi
      fi
      f=`basename $f`
      if [ ${is_complete_filename_match-0} -eq 0 ]; then
        f='*'$f'*'  # partial matching
      fi
      file_spec_org="$file_spec_org $f"
    done
  #else
  #  for f in $*
  #  do
  #    file_spec_org="$file_spec_org `basename $f`"
  #  done
  #fi
fi

is_ancestor_vim $$ $vi
if [ $? -eq 0 ]; then
  is_vim_child=1
  is_not_vi=1
fi
errorfile="${errors_err_prefix}0"
if [ -f "$errorfile" ]; then
    mv -f "${errors_err_prefix}1" "${errors_err_prefix}2" 2>/dev/null
    mv -f "${errors_err_prefix}0" "${errors_err_prefix}1" 2>/dev/null
fi

function lookup_process
{
  #
  # 1st filtering for ${reg_exp[0]} by find (and grep)
  #

  base_path=${base_path:-.}
  set +f
  base_path=`echo $base_path`
  set -f

  file_spec=""
  for f in $file_spec_org
  do
    if [ -z "$file_spec" ]; then
      file_spec="$name_opt $f"
    else
      file_spec="$file_spec  -o $name_opt $f"
    fi

    [ -z "$file_spec" ] && { usage; exit 2; }

  done

  file_spec="-type $type_opt ( $file_spec ) -a ( ! -name *.swp )"
  [ ! -z "$prune_spec" ] && file_spec="$prune_spec $file_spec"

  if [ ${is_not_grep:-0} -eq 0 ]; then
    if [ -z "${invert_opt[0]}" ]; then
      # content filtering
      if [ "$grep" = "grep" ]; then
        if [ ${is_only_text:-0} -eq 0 ]; then
          matched=`find $base_path $file_spec -print0 | xargs -0 $grep -${pattern_opt}l ${ignore_case_opt:-} "${reg_exp[0]}" | sed -e 's/[ ()]/?/g'`
        else
          # file type testing for text
          matched=`find $base_path $file_spec -print0 | xargs -0 file | grep text | cut -d : -f 1 | xargs $grep -${pattern_opt}l ${ignore_case_opt:-} "${reg_exp[0]}"`
        fi
      else
        # for zgrep, to know each filename because zgrep -H does not work.
        for f in `find $base_path $file_spec -print`
        do
          $grep -${pattern_opt}q ${ignore_case_opt:-} "${reg_exp[0]}" $f
          [ $? -eq 0 ] && matched="$matched $f"
          
        done
      fi
      re4vi="${reg_exp[0]}"
      [ $pattern_opt = "E" ] && re4vi=`echo "$re4vi"|sed -e 's#\([()?+|]\)#\\\\\1#g' -e 's#\\\\b#\\\\<#' -e 's#\\\\b#\\\\>#'`
      re4grep="${reg_exp[0]}"
    elif [ "${invert_opt[0]}" = "for_must_path" ]; then
      # path filtering
      if [ ${is_only_text:-0} -eq 0 ]; then
        matched=`find $base_path $file_spec -print | $grep -${pattern_opt} ${ignore_case_opt:-} "${reg_exp[0]}"`
      else
        # file type testing for text
        matched=`find $base_path $file_spec -print0 | xargs -0 file | grep text | cut -d : -f 1 | $grep -${pattern_opt} ${ignore_case_opt:-} "${reg_exp[0]}"`
      fi
    elif [ "${invert_opt[0]}" = "for_path" ]; then
      # path invert filtering
      if [ ${is_only_text:-0} -eq 0 ]; then
        matched=`find $base_path $file_spec -print | $grep -${pattern_opt}v ${ignore_case_opt:-} "${reg_exp[0]}"`
      else
        # file type testing for text
       matched=`find $base_path $file_spec -print0 | xargs -0 file | grep text | cut -d : -f 1 | $grep -${pattern_opt}v ${ignore_case_opt:-} "${reg_exp[0]}"`
      fi
    fi

    if [ -z "$matched" ]; then
      echo "${reg_exp[0]}: No matched."
      exit 1
    fi

    i=1
  else
    # not grep
    if [ "${invert_opt[0]}" = "for_must_path" ]; then
      # path filtering
      matched=`find $base_path $file_spec -print | $grep -${pattern_opt} ${ignore_case_opt:-} "${reg_exp[0]}"`
    elif [ "${invert_opt[0]}" = "for_path" ]; then
      # path invert filtering
      matched=`find $base_path $file_spec -print | $grep -${pattern_opt}v ${ignore_case_opt:-} "${reg_exp[0]}"`
    else
      matched=`find $base_path $file_spec -print`
    fi
    if [ -z "$matched" ]; then
      echo "${file_spec_org}: No matched."
      exit 1
    fi

    i=0
  fi

  #
  # filtering for each reg_exp by grep
  #
  while [ $i -lt "${#reg_exp[@]}" ]
  do
    matched_org=$matched
    matched=""
    for f in $matched_org
    do
      if [ ${is_not_grep:-0} -eq 0 -a -z "${invert_opt[$i]}" ]; then
        $grep -${pattern_opt}q ${ignore_case_opt:-} "${reg_exp[$i]}" $f
        x=$?
      elif [ ${is_not_grep:-0} -eq 0 -a "${invert_opt[$i]}" = "for_content" ]; then
        # invert grep (no match expected)
        x=`$grep -${pattern_opt}c ${ignore_case_opt:-} "${reg_exp[$i]}" $f`
      elif [ "${invert_opt[$i]}" = "for_path" ]; then
        # exclude path contains
        echo $f | grep -${pattern_opt}vq ${ignore_case_opt:-} "${reg_exp[$i]}"
        x=$?
      elif [ "${invert_opt[$i]}" = "for_must_path" ]; then
        # must be path contains
        echo $f | grep -${pattern_opt}q ${ignore_case_opt:-} "${reg_exp[$i]}"
        x=$?
      fi
      [ $x -eq 0 ] && matched="$matched $f"
    done
    if [ -z "$matched" ]; then
      echo "${reg_exp[$i]}: No matched."
      exit 1
    fi

    if [ -z "${invert_opt[$i]}" ]; then
      r=`echo "${reg_exp[$i]}" |sed -e 's#\([()?+|]\)#\\\\\1#g'  -e 's#\\\\b#\\\\<#' -e 's#\\\\b#\\\\>#'`
      if [ -n "$re4vi" ]; then
        re4vi="$re4vi\|$r"
      else
        re4vi="$r"
      fi
      if [ -n "$re4grep" ]; then
        re4grep="$re4grep|${reg_exp[$i]}"
      else
        re4grep="${reg_exp[$i]}"
      fi
    fi
    i=$(( i + 1 ))
  done
  [ -n "$ignore_case_opt" -a -n "$re4vi" ] && re4vi="\(${re4vi}\)\c"
}

[ ! -f "$cache_path" ] && lookup_process

#
# action
#
if [ ${is_not_vi:-0} -eq 3 ]; then
  # execute CMD
  echo $matched | xargs ${execute_cmd:-ls}
  x=$?
elif [ ${is_not_vi:-0} -gt 0 ]; then
  if [ ${is_not_grep:-0} -eq 0 ]; then
    if [ ${is_out_precedent:-0} -eq 0 ] && [ ${is_file_with_matches:-0} -eq 0 ]
    then
      if [ ! -f "$cache_path" ]; then
        $grep -${pattern_opt}Hn ${ignore_case_opt:-} "$re4grep" $matched | tee "$errorfile" | ( [ ${is_vim_child:-0}  -eq 1 ] && less -e || dd 2>/dev/null)
        cp $errorfile $cache_path
      else
        cp $cache_path $errorfile
        echo "(cached)"|cat - $errorfile|less -e
      fi
    elif [ ${is_file_with_matches:-0} -eq 1 ]; then
      $grep -${pattern_opt}l ${ignore_case_opt:-} "$re4grep" $matched
    else
      if [ ! -f "$cache_path" ]; then
        $refrep "$re4grep" $matched | tee "$errorfile" | ( [ ${is_vim_child:-0}  -eq 1 ] && less -e || dd 2>/dev/null)
        cp $errorfile $cache_path
      else
        cp $cache_path $errorfile
        echo "(cached)"|cat - $errorfile|less -e
      fi
    fi
    x=$?
  else
    x=1
    #rm -f "$errorfile"
    if [ ! -f "$cache_path" ]; then
      for f in $matched
      do
        echo "$f:1:no grep"
        x=0
      done | tee -a "$errorfile" | ( [ ${is_vim_child:-0}  -eq 1 ] && less -e || dd 2>/dev/null)
      cp $errorfile $cache_path
    else
      cp $cache_path $errorfile
      x=$?
      echo "(cached)"|cat - $errorfile|less -e
    fi
  fi
  if [ ${is_not_vi:-0} -eq 2 ]; then
    echo -n "will open as $vi, ok?(enter [y]es or else):"
    read Q
    [ "$Q" != 'y' ] && exit "$x"
    is_not_vi=0
  fi
fi

if [ ${is_not_vi:-0} -eq 0 ]; then
  if [ ${is_not_grep:-0} -eq 0 ]; then
    exec $vi "+/$re4vi/" -c :cf $matched
  else
    exec $vi -c :cf $matched
  fi
fi
exit $x
