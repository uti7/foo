" vim:set ts=8 sts=2 sw=2 tw=0: (この行に関しては:help modelineを参照)
"
" An example for a Japanese version gvimrc file.
" 日本語版のデフォルトGUI設定ファイル(gvimrc)
"
" Last Change: 11-Sep-2022.
" Maintainer:  MURAOKA Taro <koron@tka.att.ne.jp>
"
" 解説:
" このファイルにはVimの起動時に必ず設定される、GUI関連の設定が書かれていま
" す。編集時の挙動に関する設定はvimrcに書かかれています。
"
" 個人用設定は_gvimrcというファイルを作成しそこで行ないます。_gvimrcはこの
" ファイルの後に読込まれるため、ここに書かれた内容を上書きして設定することが
" 出来ます。_gvimrcは$HOMEまたは$VIMに置いておく必要があります。$HOMEは$VIM
" よりも優先され、$HOMEでみつかった場合$VIMは読込まれません。
"
" 管理者向けに本設定ファイルを直接書き換えずに済ませることを目的として、サイ
" トローカルな設定を別ファイルで行なえるように配慮してあります。Vim起動時に
" サイトローカルな設定ファイル($VIM/gvimrc_local.vim)が存在するならば、本設
" 定ファイルの主要部分が読み込まれる前に自動的に読み込みます。
"
" 読み込み後、変数g:gvimrc_local_finishが非0の値に設定されていた場合には本設
" 定ファイルに書かれた内容は一切実行されません。デフォルト動作を全て差し替え
" たい場合に利用して下さい。
"
" 参考:
"   :help gvimrc
"   :echo $HOME
"   :echo $VIM
"   :version

"---------------------------------------------------------------------------
" サイトローカルな設定($VIM/gvimrc_local.vim)があれば読み込む。読み込んだ後
" に変数g:gvimrc_local_finishに非0な値が設定されていた場合には、それ以上の設
" 定ファイルの読込を中止する。
if 1 && filereadable($VIM . '/gvimrc_local.vim')
  source $VIM/gvimrc_local.vim
  if exists('g:gvimrc_local_finish') && g:gvimrc_local_finish != 0
    finish
  endif
endif

"---------------------------------------------------------------------------
" ユーザ優先設定($HOME/.gvimrc_first.vim)があれば読み込む。読み込んだ後に変
" 数g:gvimrc_first_finishに非0な値が設定されていた場合には、それ以上の設定
" ファイルの読込を中止する。
if 0 && exists('$HOME') && filereadable($HOME . '/.gvimrc_first.vim')
  unlet! g:gvimrc_first_finish
  source $HOME/.gvimrc_first.vim
  if exists('g:gvimrc_first_finish') && g:gvimrc_first_finish != 0
    finish
  endif
endif

"---------------------------------------------------------------------------
" (試験中)
" Vimをモードレスな普通のエディタに変身させてしまうCreamを手軽に利用するため
" の設定。vimrc参照。
if 1 && exists('g:cream_enabled') && g:cream_enabled != 0
  if filereadable($VIM.'/cream/_gvimrc')
    source $VIM/cream/_gvimrc
  endif
  finish
endif

"---------------------------------------------------------------------------
" Bram氏の提供する設定例をインクルード (別ファイル:vimrc_example.vim)。これ
" 以前にg:no_gvimrc_exampleに非0な値を設定しておけばインクルードしない。
if 1 && (!exists('g:no_gvimrc_example') || g:no_gvimrc_example == 0)
  source $VIMRUNTIME/gvimrc_example.vim
endif

"---------------------------------------------------------------------------
" フォント設定:
"
if has('win32')
  " Windows用
  "if &guifont == ''
    set ambiwidth=double
    set guifont=Consolas:h9
    "set guifont=MS_Gothic:h9
    "set guifont=MS_Mincho:h12:cSHIFTJIS
    "set guifont=Migu_1M:h9
  "endif
  " 行間隔の設定
  set linespace=1
elseif has('mac')
  set guifont=Osaka－等幅:h14
elseif has('xfontset')
  " UNIX用 (xfontsetを使用)
  set guifontset=a14,r14,k14
endif

"---------------------------------------------------------------------------
" ウインドウに関する設定:
"
" ウインドウの幅
set columns=80
" ウインドウの高さ
set lines=48
" コマンドラインの高さ(GUI使用時)
set cmdheight=2
" 画面を黒地に白にする (次行の先頭の " を削除すれば有効になる)
"colorscheme evening " (GUI使用時)

"---------------------------------------------------------------------------
" 日本語入力に関する設定:
"
if has('multi_byte_ime') || has('xim')
  " IME ON時のカーソルの色を設定(設定例:紫)
  highlight CursorIM guibg=Purple guifg=NONE
  " 挿入モード・検索モードでのデフォルトのIME状態設定
  set iminsert=0 imsearch=0
  if has('xim') && has('GUI_GTK')
    " XIMの入力開始キーを設定:
    " 下記の s-space はShift+Spaceの意味でkinput2+canna用設定
    "set imactivatekey=s-space
  endif
  " 挿入モードでのIME状態を記憶させない場合、次行のコメントを解除
  "inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
endif

"---------------------------------------------------------------------------
" マウスに関する設定:
"
" 解説:
" mousefocusは幾つか問題(一例:ウィンドウを分割しているラインにカーソルがあっ
" ている時の挙動)があるのでデフォルトでは設定しない。Windowsではmousehide
" が、マウスカーソルをVimのタイトルバーに置き日本語を入力するとチラチラする
" という問題を引き起す。
"
" どのモードでもマウスを使えるようにする
set mouse=a
" マウスの移動でフォーカスを自動的に切替えない (mousefocus:切替る)
set nomousefocus
" 入力時にマウスポインタを隠す (nomousehide:隠さない)
set mousehide
" ビジュアル選択(D&D他)を自動的にクリップボードへ (:help guioptions_a)
"set guioptions+=a

"---------------------------------------------------------------------------
" メニューに関する設定:
"
" 解説:
" "M"オプションが指定されたときはメニュー("m")・ツールバー("T")供に登録され
" ないので、自動的にそれらの領域を削除するようにした。よって、デフォルトのそ
" れらを無視してユーザが独自の一式を登録した場合には、それらが表示されないと
" いう問題が生じ得る。しかしあまりにレアなケースであると考えられるので無視す
" る。
"
if &guioptions =~# 'M'
  let &guioptions = substitute(&guioptions, '[mT]', '', 'g')
endif

"---------------------------------------------------------------------------
" その他、見栄えに関する設定:
"
" 検索文字列をハイライトしない(_vimrcではなく_gvimrcで設定する必要がある)
"set nohlsearch

"---------------------------------------------------------------------------
" 印刷に関する設定:
"
" 注釈:
" 印刷はGUIでなくてもできるのでvimrcで設定したほうが良いかもしれない。この辺
" りはWindowsではかなり曖昧。一般的に印刷には明朝、と言われることがあるらし
" いのでデフォルトフォントは明朝にしておく。ゴシックを使いたい場合はコメント
" アウトしてあるprintfontを参考に。
"
" 参考:
"   :hardcopy
"   :help 'printfont'
"   :help printing
"
" 印刷用フォント
if has('printer')
  if has('win32')
    set printfont=MS_Mincho:h9h12:cSHIFTJIS
  endif
endif

" Copyright (C) 2005 KaoriYa/MURAOKA Taro
"2006-01-06 utiumi
set backupdir=>$TEMP,C:/tmp,c:\temp,. " backup directory
set directory=>$TEMP,C:/tmp,c:\temp,. " swap directory
set shortmess=I
set nobackup
set ts=2
set sw=2
gui
:set guioptions-=T
colorscheme default " (GUI使用時)
:map <F5> a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
:imap <F5> <C-R>=strftime("%Y-%m-%d")<CR>
:map <F6> a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
:imap <F6> <C-R>=strftime("%Y-%m-%d")<CR>
noremap   <F1> :tabNext 1<CR>:colorscheme default
"cmap <F1> tabNext 1|:colorscheme default
map <F2> :bp<CR>
map <F3> :bn<CR>
map <F4> :bd<CR>
map <F8> :cp<CR>
map <F9> :cn<CR>
map <C-F8> :tp<CR>
map <C-F9> :tn<CR>
nnoremap <F11> :tabprevious<CR>
nnoremap <F12> :tabNext<CR>
tnoremap <F12> <C-w>:tabNext<CR>
map <C-K> :cp<CR>
map <C-J> :cn<CR>
map <C-H> :cc<CR>
nnoremap <Leader>^ :cf &errorfile
cmap  :pwd<CR>
map  :n%<CR>
"map  JAa
map  gq
map gC  "+y
map gX  "+x
map gV  "+gP
imap gV  a"+gPxa
"cmap dvs set columns=160<CR>:VDsplit ~/デスクトップ/syllabus/htdocs/
cmap dvd set columns=160<CR>:VDsplit 
cmap Vsp set columns=160<CR>:vsp 
cmap NOD ^[^-@!"#$%&'()=\[\]/?><;:,.0-9０-９･].*\*$
cmap FJ !powershell -f $vim\fj.ps1 -p 
cnoremap bro bro filter  ol<Left><Left><Left>

set tags=tags;,ctags,$temp/mono.doubt
set grepprg=findstr\ /r
" Chalice SETTINGS
set runtimepath+=$VIM/chalice
runtime plugin/chalice.vim
let chalice_previewflags = 'autoclose'
set lcs=tab:>.,eol:$,trail:_,extends:\

" inhibit pause on command prompt when external command excetion
noremap K :silent !{program} <c-r><c-w><cr>

" \s open as url which silent
function! HandleURI(is_show_url)
  let s:uri = matchstr(getline("."), '[a-z]\+:\/\/[^	<>\[\]|,;:"]*')
  if s:uri == ""
    let s:uri = matchstr(getline("."), '\([a-z]:\\\|\\\\\)[^/*?	<>\[\]|,;:"]*')
    if s:uri == ""
      echo "No URI or path found in line."
      return
    endif
  endif
  let s:uri = substitute(s:uri, '%', '\\%', "g")
  let s:uri = substitute(s:uri, '\]$', '', "g")
  if a:is_show_url != 1
    exec 'silent !cmd /c powershell -f ' . $vim . '\start.ps1 "' . s:uri . '"'
  endif
  let s:uri = substitute(s:uri, '%', '\\%', "g")
  let s:uri = substitute(s:uri, '\]$', '', "g")
  echo s:uri
	"echo a:arg
endfunction
map <Leader>s :call HandleURI(0)<CR>
map <Leader>S :call HandleURI(1)<CR>

function! Fj(argstr)
	" at directory list buffer 
	let s:cmdline = '!powershell -f ' . $vim . '\fj.ps1 ' . a:argstr
	exec s:cmdline
endfunction
cnoremap FJ call Fj("-p 


let g:netrw_localcopycmd='copy' " avoid netrw notice
let g:netrw_localrmdir='delete' " avoid netrw
let g:netrw_localmkdir='md' " avoid netrw

if has('multi_byte_ime')
  highlight Cursor guifg=White guibg=Red
  highlight CursorIM guifg=Black guibg=Green
endif

" force begin of line when type a '#' at ps1 file, let it cancel
autocmd BufEnter *.ps1 setlocal indentkeys+=0#
autocmd BufEnter *.ps1_latest setlocal autoread

" titlestring
autocmd BufEnter * let &titlestring = expand("%")
"set titlestring=

map  <C-C> "+y
map  <C-X> "+x
"visual map  <C-V> "+gP
"imap  <C-V> "+gP

imap <C-V> <S-INS>
cmap <C-V> <S-INS>

" tag duplicatin behavior = list choice
nnoremap <C-]> g<C-]>

" fold for txt
"  zc : close it, zo: open it, zM: close all, zR: open all
"set foldmethod=indent
"set foldlevel=3

set shell=C:\Windows\System32\cmd.exe
"set shellcmdflag=
:set noundofile
"set nowrapscan

function! s:open_msys_terminal()
  colorscheme desert
  "set shell=C:/msys64/usr/bin/env.exe\ MSYS=enable_pcon\ MSYSTEM=MSYS\ /bin/bash\ --login
  let s:cl = 'set shell=C:/msys64/usr/bin/env.exe\ MSYS=enable_pcon\ MSYSTEM=MSYS\ _SWD=\"' . substitute(getcwd(), " ", "\\\\ ", "g") . '\"\ /bin/bash\ --login'
  execute s:cl
  terminal
  set shell=C:\Windows\System32\cmd.exe
  colorscheme default
endfunction
command! MSYS :call s:open_msys_terminal()

function! s:open_pwsh_terminal()
  colorscheme darkblue
  "set shell=$LOCALAPPDATA\Microsoft\WindowsApps\pwsh.exe
  "set shell=C:\Program\ Files\PowerShell\7\pwsh.exe
  let s:cl='set shell=C:\Program\ Files\PowerShell\7\pwsh.exe\ -NoExit\ -c\ \"&{Set-Location\ \\\"' . substitute(getcwd(), " ", "\\\\ ", "g") . '\\\"}\"'
  execute  s:cl
  terminal
  set shell=C:\Windows\System32\cmd.exe
  "<C-w>w
  colorscheme default
endfunction
command! PWSH :call s:open_pwsh_terminal()

function! s:delete_hide_buffer()
  let list = filter(range(1, bufnr("$")), "buflisted(v:val)")
  let winlist = range(1, winnr("$"))
  for num in list
    let is_visible = 0
    for w in winlist
      if winbufnr(w) == num
        let is_visible = 1
        break
      endif
    endfor
    if is_visible == 0
      execute "bdel ".num
    endif
  endfor
endfunction

command! Hdelall :call s:delete_hide_buffer()

function! ChangeFontSize(zoom)
  let optval = split(&guifont, ':')
  let fsize = split(optval[1], 'h')
  let fsize[0] += a:zoom
  echo 'guifont=' . optval[0] . ':h' . fsize[0]
  "let &guifont= 'MS_Gothic:h' . fsize[0]
  let &guifont=optval[0] . ':h' . fsize[0]
endfunction
noremap + :call ChangeFontSize(1)<CR>
noremap - :call ChangeFontSize(-1)<CR>
command! ZI :call ChangeFontSize(1)
command! ZO :call ChangeFontSize(-1)

" oops! doesn't work it
"tmap <S-Del> <C-w>\"+
"tnoremap <Leader>v <C-w>\"+

vnoremap <Leader>r :s/\<\(and\\|or\\|from\\|inner\\|outer\\|left\\|right\\|on\\|where\\|order\\|grroup\)\>\\|,/\r&/g<CR>
